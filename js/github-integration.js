/**
 * GitHub Pages Integration Script for F4TA Morgana Lab
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–∞ GitHub Pages —Å –ª–æ–∫–∞–ª—å–Ω—ã–º API —á–µ—Ä–µ–∑ Ngrok
 */

class GitHubIntegration {
    constructor() {
        this.config = null;
        this.apiClient = null;
        this.telegramApp = null;
        this.connected = false;
        this.user = null;
        this.currentGeneration = null;

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.state = {
            loading: false,
            error: null,
            apiHealth: false,
            botConnected: false
        };

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        this.init = this.init.bind(this);
        this.handleFileUpload = this.handleFileUpload.bind(this);
        this.startGeneration = this.startGeneration.bind(this);
        this.checkGenerationStatus = this.checkGenerationStatus.bind(this);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
     */
    async init() {
        console.log('üîÑ Initializing GitHub Pages Integration...');

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            await this.loadConfig();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
            this.initTelegramApp();

            // –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
            this.createApiClient();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await this.checkConnection();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI
            this.setupUI();

            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            this.startHealthMonitoring();

            console.log('‚úÖ GitHub Pages Integration initialized successfully');
            this.updateStatus('–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ', 'success');

        } catch (error) {
            console.error('‚ùå Integration initialization failed:', error);
            this.updateStatus('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', 'error');
            this.enableFallbackMode();
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    async loadConfig() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if (window.F4TAConfig) {
            this.config = window.F4TAConfig;
            return;
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try {
            const response = await fetch('./js/config.json');
            if (response.ok) {
                this.config = await response.json();
                return;
            }
        } catch (error) {
            console.warn('Config file not found, using defaults');
        }

        // Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = this.getDefaultConfig();
    }

    /**
     * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    getDefaultConfig() {
        return {
            NGROK_CONFIG: {
                WEBHOOK_URL: "",
                API_URL: "",
                LAST_UPDATE: new Date().toISOString()
            },
            API_CONFIG: {
                baseURL: "/api/v1",
                timeout: 30000,
                endpoints: {
                    uploadImage: "/upload/image",
                    uploadVideo: "/upload/video",
                    startGeneration: "/generation/start",
                    getStatus: "/generation/status",
                    getUserProfile: "/user/profile",
                    health: "/health"
                }
            }
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
     */
    initTelegramApp() {
        if (window.Telegram?.WebApp) {
            const tg = window.Telegram.WebApp;
            tg.ready();
            tg.expand();

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.user = tg.initDataUnsafe?.user;

            if (this.user) {
                console.log('üë§ Telegram User:', this.user);
                this.updateUserInfo();
            }

            this.telegramApp = tg;
            console.log('‚úÖ Telegram WebApp initialized');
        } else {
            console.warn('‚ö†Ô∏è Telegram WebApp not available');
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞
     */
    createApiClient() {
        const baseURL = this.config.NGROK_CONFIG.API_URL || this.config.API_CONFIG.baseURL;

        this.apiClient = {
            baseURL,

            async request(endpoint, options = {}) {
                const url = `${baseURL}${endpoint}`;

                const defaultOptions = {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                };

                // –î–æ–±–∞–≤–ª—è–µ–º Telegram –¥–∞–Ω–Ω—ã–µ
                if (window.Telegram?.WebApp?.initData) {
                    defaultOptions.headers['X-Telegram-Init-Data'] = window.Telegram.WebApp.initData;
                }

                const requestOptions = { ...defaultOptions, ...options };

                try {
                    const response = await fetch(url, requestOptions);

                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }

                    return await response.json();
                } catch (error) {
                    console.error(`API Error for ${endpoint}:`, error);
                    throw error;
                }
            }
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    async checkConnection() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∑–¥–æ—Ä–æ–≤—å–µ
            const health = await this.apiClient.request('/api/health');
            this.state.apiHealth = health.status === 'healthy';

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞
            if (this.config.NGROK_CONFIG.WEBHOOK_URL) {
                const botInfo = await fetch(`${this.config.NGROK_CONFIG.WEBHOOK_URL}/bot/info`);
                this.state.botConnected = botInfo.ok;
            }

            this.connected = this.state.apiHealth;

        } catch (error) {
            console.error('Connection check failed:', error);
            this.connected = false;
            this.state.apiHealth = false;
            this.state.botConnected = false;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    setupUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        this.updateUserInfo();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.updateConnectionStatus();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    updateUserInfo() {
        if (this.user) {
            const userNameElement = document.getElementById('userName');
            const userIdElement = document.getElementById('userId');

            if (userNameElement) {
                userNameElement.textContent = this.user.first_name || 'User';
            }

            if (userIdElement) {
                userIdElement.textContent = `ID: ${this.user.id}`;
            }
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –§–∞–π–ª–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        const fileInputs = document.querySelectorAll('input[type="file"]');
        fileInputs.forEach(input => {
            input.addEventListener('change', this.handleFileUpload);
        });

        // –ö–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        const generateButtons = document.querySelectorAll('.generate-btn');
        generateButtons.forEach(button => {
            button.addEventListener('click', this.startGeneration);
        });

        // Drag & Drop
        const dropZones = document.querySelectorAll('.drop-zone');
        dropZones.forEach(zone => {
            zone.addEventListener('dragover', this.handleDragOver);
            zone.addEventListener('drop', this.handleDrop);
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
     */
    async handleFileUpload(event) {
        const file = event.target.files[0];
        if (!file) return;

        console.log('üìÅ File selected:', file.name);

        try {
            this.updateStatus('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...', 'loading');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            const maxSize = 50 * 1024 * 1024; // 50MB
            if (file.size > maxSize) {
                throw new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            if (!this.isSupportedFile(file)) {
                throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞');
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            const uploadResult = await this.uploadFile(file);

            if (uploadResult.success) {
                this.updateStatus('–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
                this.displayUploadedFile(file, uploadResult.data);
            } else {
                throw new Error(uploadResult.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
            }

        } catch (error) {
            console.error('Upload error:', error);
            this.updateStatus(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`, 'error');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
     */
    async uploadFile(file) {
        const formData = new FormData();
        formData.append('file', file);

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.user) {
            formData.append('user_id', this.user.id.toString());
            formData.append('user_name', this.user.first_name);
        }

        const endpoint = file.type.startsWith('image/') ? '/upload/image' : '/upload/video';

        try {
            const response = await this.apiClient.request(endpoint, {
                method: 'POST',
                body: formData,
                headers: {} // –£–±–∏—Ä–∞–µ–º Content-Type –¥–ª—è multipart
            });

            return response;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    async startGeneration(event) {
        const button = event.target;
        const toolType = button.dataset.tool || 'metamorf';

        try {
            this.updateStatus('–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...', 'loading');

            // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            const params = this.getGenerationParams(toolType);

            // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            const result = await this.apiClient.request('/generation/start', {
                method: 'POST',
                body: JSON.stringify({
                    tool: toolType,
                    params,
                    user_id: this.user?.id
                })
            });

            if (result.success) {
                this.currentGeneration = result.generation_id;
                this.updateStatus('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞...', 'processing');
                this.startStatusPolling();
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
            }

        } catch (error) {
            console.error('Generation error:', error);
            this.updateStatus(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${error.message}`, 'error');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    getGenerationParams(toolType) {
        const params = {
            quality: 'high',
            preserve_original: true
        };

        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        switch (toolType) {
            case 'metamorf':
                params.face_enhancer = 'gfpgan';
                params.frame_processor = 'face_swapper';
                break;
            case 'neural_editor':
                params.model = 'stable-diffusion';
                params.steps = 20;
                break;
        }

        return params;
    }

    /**
     * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    startStatusPolling() {
        if (!this.currentGeneration) return;

        const pollInterval = setInterval(async () => {
            try {
                const status = await this.checkGenerationStatus();

                if (status.completed) {
                    clearInterval(pollInterval);
                    this.handleGenerationComplete(status);
                } else if (status.failed) {
                    clearInterval(pollInterval);
                    this.handleGenerationError(status);
                } else {
                    this.updateGenerationProgress(status);
                }

            } catch (error) {
                console.error('Status polling error:', error);
                clearInterval(pollInterval);
                this.updateStatus('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', 'error');
            }
        }, 2000);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    async checkGenerationStatus() {
        if (!this.currentGeneration) return null;

        return await this.apiClient.request(`/generation/status/${this.currentGeneration}`);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    handleGenerationComplete(status) {
        console.log('‚úÖ Generation completed:', status);
        this.updateStatus('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'success');

        if (status.result_url) {
            this.displayResult(status.result_url);
        }

        this.currentGeneration = null;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    handleGenerationError(status) {
        console.error('‚ùå Generation failed:', status);
        this.updateStatus(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${status.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
        this.currentGeneration = null;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    updateGenerationProgress(status) {
        const progress = status.progress || 0;
        const message = status.message || '–û–±—Ä–∞–±–æ—Ç–∫–∞...';

        this.updateStatus(`${message} (${Math.round(progress)}%)`, 'processing');

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        const progressBar = document.querySelector('.progress-bar');
        if (progressBar) {
            progressBar.style.width = `${progress}%`;
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     */
    displayResult(resultUrl) {
        const resultContainer = document.getElementById('result-container');
        if (!resultContainer) return;

        const img = document.createElement('img');
        img.src = resultUrl;
        img.alt = 'Generated Result';
        img.className = 'result-image';

        resultContainer.innerHTML = '';
        resultContainer.appendChild(img);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        resultContainer.style.display = 'block';
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ñ–∞–π–ª–∞
     */
    isSupportedFile(file) {
        const supportedTypes = [
            'image/jpeg',
            'image/png',
            'image/webp',
            'image/bmp',
            'video/mp4',
            'video/avi',
            'video/quicktime'
        ];

        return supportedTypes.includes(file.type);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     */
    updateStatus(message, type = 'info') {
        console.log(`[${type.toUpperCase()}] ${message}`);

        const statusElement = document.getElementById('status-message');
        if (statusElement) {
            statusElement.textContent = message;
            statusElement.className = `status ${type}`;
        }

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        if (type === 'error' && this.telegramApp) {
            this.telegramApp.showAlert(`–û—à–∏–±–∫–∞: ${message}`);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    updateConnectionStatus() {
        const connectionElement = document.getElementById('connection-status');
        if (!connectionElement) return;

        if (this.connected) {
            connectionElement.innerHTML = 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
            connectionElement.className = 'connection-status connected';
        } else {
            connectionElement.innerHTML = 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ';
            connectionElement.className = 'connection-status disconnected';
        }
    }

    /**
     * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
     */
    startHealthMonitoring() {
        setInterval(async () => {
            await this.checkConnection();
            this.updateConnectionStatus();
        }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }

    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ fallback —Ä–µ–∂–∏–º–∞
     */
    enableFallbackMode() {
        console.warn('üîÑ Enabling fallback mode');

        this.updateStatus('–†–∞–±–æ—Ç–∞ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ', 'warning');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º demo –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        const demoNotice = document.createElement('div');
        demoNotice.className = 'demo-notice';
        demoNotice.innerHTML = `
            <h3>üîß –î–µ–º–æ —Ä–µ–∂–∏–º</h3>
            <p>API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.</p>
            <p>–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä.</p>
        `;

        document.body.insertBefore(demoNotice, document.body.firstChild);
    }

    /**
     * Drag & Drop –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
     */
    handleDragOver(event) {
        event.preventDefault();
        event.currentTarget.classList.add('drag-over');
    }

    handleDrop(event) {
        event.preventDefault();
        event.currentTarget.classList.remove('drag-over');

        const files = event.dataTransfer.files;
        if (files.length > 0) {
            this.handleFileUpload({ target: { files } });
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('üß¨ F4TA Morgana Lab - GitHub Pages Integration Loading...');

    // –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    window.F4TAIntegration = new GitHubIntegration();
    window.F4TAIntegration.init();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = GitHubIntegration;
}
